/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LibraryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBook"
      | "admin"
      | "books"
      | "getBook"
      | "removeBook"
      | "updateBook"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BookAdded" | "BookRemoved" | "BookUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBook",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "books", values: [string]): string;
  encodeFunctionData(functionFragment: "getBook", values: [string]): string;
  encodeFunctionData(functionFragment: "removeBook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateBook",
    values: [string, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "books", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateBook", data: BytesLike): Result;
}

export namespace BookAddedEvent {
  export type InputTuple = [
    isbn: string,
    title: string,
    year: BigNumberish,
    author: string
  ];
  export type OutputTuple = [
    isbn: string,
    title: string,
    year: bigint,
    author: string
  ];
  export interface OutputObject {
    isbn: string;
    title: string;
    year: bigint;
    author: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookRemovedEvent {
  export type InputTuple = [isbn: string];
  export type OutputTuple = [isbn: string];
  export interface OutputObject {
    isbn: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookUpdatedEvent {
  export type InputTuple = [
    isbn: string,
    title: string,
    year: BigNumberish,
    author: string
  ];
  export type OutputTuple = [
    isbn: string,
    title: string,
    year: bigint,
    author: string
  ];
  export interface OutputObject {
    isbn: string;
    title: string;
    year: bigint;
    author: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Library extends BaseContract {
  connect(runner?: ContractRunner | null): Library;
  waitForDeployment(): Promise<this>;

  interface: LibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBook: TypedContractMethod<
    [_isbn: string, _title: string, _year: BigNumberish, _author: string],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  books: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string] & {
        isbn: string;
        title: string;
        year: bigint;
        author: string;
      }
    ],
    "view"
  >;

  getBook: TypedContractMethod<
    [_isbn: string],
    [[string, string, bigint, string]],
    "view"
  >;

  removeBook: TypedContractMethod<[_isbn: string], [void], "nonpayable">;

  updateBook: TypedContractMethod<
    [_isbn: string, _title: string, _year: BigNumberish, _author: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBook"
  ): TypedContractMethod<
    [_isbn: string, _title: string, _year: BigNumberish, _author: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "books"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string] & {
        isbn: string;
        title: string;
        year: bigint;
        author: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBook"
  ): TypedContractMethod<
    [_isbn: string],
    [[string, string, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeBook"
  ): TypedContractMethod<[_isbn: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBook"
  ): TypedContractMethod<
    [_isbn: string, _title: string, _year: BigNumberish, _author: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BookAdded"
  ): TypedContractEvent<
    BookAddedEvent.InputTuple,
    BookAddedEvent.OutputTuple,
    BookAddedEvent.OutputObject
  >;
  getEvent(
    key: "BookRemoved"
  ): TypedContractEvent<
    BookRemovedEvent.InputTuple,
    BookRemovedEvent.OutputTuple,
    BookRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BookUpdated"
  ): TypedContractEvent<
    BookUpdatedEvent.InputTuple,
    BookUpdatedEvent.OutputTuple,
    BookUpdatedEvent.OutputObject
  >;

  filters: {
    "BookAdded(string,string,uint256,string)": TypedContractEvent<
      BookAddedEvent.InputTuple,
      BookAddedEvent.OutputTuple,
      BookAddedEvent.OutputObject
    >;
    BookAdded: TypedContractEvent<
      BookAddedEvent.InputTuple,
      BookAddedEvent.OutputTuple,
      BookAddedEvent.OutputObject
    >;

    "BookRemoved(string)": TypedContractEvent<
      BookRemovedEvent.InputTuple,
      BookRemovedEvent.OutputTuple,
      BookRemovedEvent.OutputObject
    >;
    BookRemoved: TypedContractEvent<
      BookRemovedEvent.InputTuple,
      BookRemovedEvent.OutputTuple,
      BookRemovedEvent.OutputObject
    >;

    "BookUpdated(string,string,uint256,string)": TypedContractEvent<
      BookUpdatedEvent.InputTuple,
      BookUpdatedEvent.OutputTuple,
      BookUpdatedEvent.OutputObject
    >;
    BookUpdated: TypedContractEvent<
      BookUpdatedEvent.InputTuple,
      BookUpdatedEvent.OutputTuple,
      BookUpdatedEvent.OutputObject
    >;
  };
}
